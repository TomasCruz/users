// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "TomasCruz",
            "url": "https://github.com/TomasCruz/users"
        },
        "license": {
            "name": "MIT",
            "url": "https://mit-license.org/"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/health": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "health check",
                "operationId": "health",
                "responses": {
                    "204": {
                        "description": "Healthy"
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/entities.ErrResp"
                        }
                    }
                }
            }
        },
        "/users/{user-id}": {
            "get": {
                "description": "gets user details",
                "produces": [
                    "application/json"
                ],
                "summary": "gets user",
                "operationId": "get-user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User id",
                        "name": "user-id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User details",
                        "schema": {
                            "$ref": "#/definitions/entities.UserResp"
                        }
                    },
                    "400": {
                        "description": "Bad ID",
                        "schema": {
                            "$ref": "#/definitions/entities.ErrResp"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/entities.ErrResp"
                        }
                    },
                    "424": {
                        "description": "Database Error",
                        "schema": {
                            "$ref": "#/definitions/entities.ErrResp"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/entities.ErrResp"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "entities.ErrResp": {
            "type": "object",
            "properties": {
                "errorMessage": {
                    "type": "string",
                    "example": "A horrible, terrible, absolutely awful error"
                }
            }
        },
        "entities.UserResp": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "pswd_hash": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Users",
	Description:      "Users service",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
